<?xml version="1.0" encoding="UTF-8"?>
<project name="FLVParser" default="build" basedir=".">
	<property name="src.dir" value="src" />
	<property name="test.dir" value="test" />
	<property name="dist.dir" value="dist" />
	<property name="lib.dir" value="lib" />
	<property name="build.dir" value="build" />
	<property name="build.classes" value="${build.dir}/classes" />
	<property name="build.test-classes"
		value="${build.dir}/test-classes" />
	<property name="coverage.dir" value="coverage" />
	<property name="javac.debug" value="on" />
	<property name="build.compiler" value="modern" />
	<property name="prompt" value="no" />
	<patternset id="java.libs" includes="**/*.jar,**/*.zip" />

	<path id="mylibs">
		<fileset dir="${lib.dir}">
			<patternset refid="java.libs" />
		</fileset>
		<fileset dir="${dist.dir}">
			<patternset refid="java.libs" />
		</fileset>
	</path>

	<path id="emma.lib">
		<pathelement location="${lib.dir}/emma.jar" />
		<pathelement location="${lib.dir}/emma_ant.jar" />
	</path>

	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />

	<target name="emma"
		description="turns on EMMA's on-the-fly instrumentation mode">
		<property name="emma.enabled" value="true" />
	</target>

	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.classes}" />
		<mkdir dir="${build.test-classes}" />
		<mkdir dir="${coverage.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="build" depends="clean,prepare">
		<javac classpathref="mylibs" destdir="${build.classes}"
			debug="on" debuglevel="lines,vars,source" deprecation="on"
			target="1.5">
			<src path="${src.dir}" />
		</javac>
		<jar jarfile="${dist.dir}/FLVParser.jar"
			basedir="${build.classes}" />

		<javac classpathref="mylibs" destdir="${build.test-classes}"
			debug="on" debuglevel="lines,vars,source" deprecation="on"
			target="1.5">
			<src path="${test.dir}" />
		</javac>
		<jar jarfile="${dist.dir}/TestFLVParser.jar"
			basedir="${build.test-classes}" />

	</target>

	<target name="clean">
		<delete quiet="true">
			<fileset dir="${build.classes}" includes="**/*" />
			<fileset dir="${build.test-classes}" includes="**/*" />
			<fileset dir="${coverage.dir}" includes="**/*" />
			<fileset dir="${dist.dir}" includes="**/*" />
		</delete>
		<delete quiet="true" dir="${coverage.dir}" />
		<delete quiet="true" dir="${build.classes}" />
		<delete quiet="true" dir="${build.test-classes}" />
		<delete quiet="true" dir="${build.dir}" />
		<delete quiet="true" dir="${dist.dir}" />
	</target>

	<target name="debug" depends="clean,build">
		<java jar="dist/AccountMigration.jar" fork="true">
			<arg value="${config}" />
			<sysproperty key="DEBUG" value="true" />
			<jvmarg
				value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8001" />
		</java>
	</target>



	<target name="test-debug" depends="build,emma,clean">
		<emmajava enabled="${emma.enabled}" libclasspathref="emma.lib"
			sourcepath="${src.dir}" classpathref="mylibs"
			classname="org.junit.runner.JUnitCore">
			<arg value="com.sdm.FLVParser.test.FLVParserTestSuite" />
			<jvmarg
				value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8001" />
			<html outfile="${coverage.dir}/coverage.html" />
			<filter includes="com.sdm.FLVParser.*" />
		</emmajava>
	</target>

	<target name="test" depends="build,emma,clean">
		<emmajava enabled="${emma.enabled}" libclasspathref="emma.lib"
			sourcepath="${src.dir}" classpathref="mylibs"
			classname="org.junit.runner.JUnitCore" maxmemory="1g">
			<arg value="com.sdm.FLVParser.test.FLVParserTestSuite" />
			<html outfile="${coverage.dir}/coverage.html" />
			<filter includes="com.sdm.FLVParser.*" />
		</emmajava>
	</target>

	<target name="release" depends="build,clean">
		<delete quiet="true" dir="${release}" />
		<copy todir="${release}/dist">
			<fileset dir="${dist.dir}" includes="**/*" />
		</copy>
		<copy todir="${release}/conf">
			<fileset dir="${conf.dir}" includes="**/*" />
		</copy>
		<copy todir="${release}/lib">
			<fileset dir="${lib.dir}" includes="**/*" />
		</copy>
		<copy todir="${release}/src">
			<fileset dir="${src.dir}" includes="**/*" />
		</copy>
		<copy todir="${release}/bin">
			<fileset dir="${bin.dir}" includes="**/*" />
		</copy>

		<copy todir="${release}">
			<fileset dir="." includes="manifest.mf,build.xml" />
		</copy>
		<zip destfile="${release}.zip" basedir="${release}" />
	</target>

</project>